import { useState, useEffect } from "react";
import { subscribeToData } from "@/lib/firebase";
import { Card, CardContent } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Report } from "@/types/index";

interface ReportsDownloadsProps {
  selectedLocation: string;
}

// Helper functions for file downloads
const downloadTextFile = (fileName: string, title: string, description: string, location: string) => {
  const content = `
${title}
${'-'.repeat(title.length)}
Location: ${location}
Date: ${new Date().toLocaleDateString()}

${description}

This report was generated by AirSense Air Quality Monitoring System.
`;

  const blob = new Blob([content], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = fileName;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
};

const downloadSampleCSV = (fileName: string, title: string, location: string) => {
  // Generate CSV content
  const headers = ['Date', 'Time', 'PM2.5', 'PM10', 'CO2', 'CO', 'Temperature', 'Humidity', 'AQI'];
  
  const rows = [];
  const today = new Date();
  
  // Generate 30 days of sample data
  for (let i = 30; i >= 0; i--) {
    const date = new Date(today);
    date.setDate(today.getDate() - i);
    
    const dateStr = date.toLocaleDateString();
    const timeStr = '12:00:00';
    
    // Base values with small random variations
    const pm25 = Math.round((35 + Math.random() * 20 - 10) * 10) / 10;
    const pm10 = Math.round((45 + Math.random() * 25 - 12) * 10) / 10;
    const co2 = Math.round(750 + Math.random() * 100 - 50);
    const co = Math.round((1.2 + Math.random() * 0.6 - 0.3) * 10) / 10;
    const temp = Math.round((24 + Math.random() * 4 - 2) * 10) / 10;
    const humidity = Math.round(60 + Math.random() * 20 - 10);
    
    // Simple AQI calculation based on PM2.5
    const aqi = Math.round(pm25 * 1.5);
    
    rows.push([dateStr, timeStr, pm25, pm10, co2, co, temp, humidity, aqi]);
  }
  
  // Create CSV content
  let csvContent = headers.join(',') + '\n';
  
  rows.forEach(row => {
    csvContent += row.join(',') + '\n';
  });
  
  // Create and download the file
  const blob = new Blob([csvContent], { type: 'text/csv' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = fileName;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
};

const downloadSamplePDF = (fileName: string, title: string, description: string, location: string) => {
  // For PDF, we'll use a workaround to simulate a PDF download
  // In a real app, we would use a library like jsPDF or generate PDFs server-side
  
  // Create a temporary HTML content that looks like a PDF
  const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>${title}</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .header { text-align: center; margin-bottom: 30px; }
        .logo { font-weight: bold; font-size: 24px; margin-bottom: 10px; }
        h1 { margin-bottom: 20px; }
        .metadata { margin-bottom: 30px; }
        .content { margin-bottom: 30px; line-height: 1.5; }
        .footer { margin-top: 50px; text-align: center; font-size: 12px; color: #666; }
      </style>
    </head>
    <body>
      <div class="header">
        <div class="logo">AirSense</div>
        <h1>${title}</h1>
      </div>
      
      <div class="metadata">
        <p><strong>Location:</strong> ${location}</p>
        <p><strong>Date Generated:</strong> ${new Date().toLocaleDateString()}</p>
        <p><strong>Report ID:</strong> AQI-${Math.random().toString(36).substring(2, 10).toUpperCase()}</p>
      </div>
      
      <div class="content">
        <p>${description}</p>
        
        <h2>Air Quality Summary</h2>
        <p>The air quality in ${location} has shown the following patterns over the reporting period:</p>
        <ul>
          <li>Average AQI: 52 (Moderate)</li>
          <li>Peak AQI: 78 (Moderate) on ${new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toLocaleDateString()}</li>
          <li>Lowest AQI: 32 (Good) on ${new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toLocaleDateString()}</li>
        </ul>
        
        <h2>Recommendations</h2>
        <p>Based on the recorded air quality data, we recommend:</p>
        <ul>
          <li>Continue monitoring air quality trends, particularly during peak traffic hours</li>
          <li>Sensitive individuals should be cautious during outdoor activities when AQI exceeds 50</li>
          <li>Consider implementing additional air quality improvement measures in identified hotspots</li>
        </ul>
      </div>
      
      <div class="footer">
        <p>This report was generated by AirSense Air Quality Monitoring System</p>
        <p>&copy; 2023-2024 AirSense. All rights reserved.</p>
      </div>
    </body>
    </html>
  `;
  
  // Create a Blob with the HTML content
  const blob = new Blob([htmlContent], { type: 'text/html' });
  const url = URL.createObjectURL(blob);
  
  // Open the HTML in a new window
  const newWindow = window.open(url, '_blank');
  if (newWindow) {
    newWindow.onload = () => {
      // Trigger print dialog after the page loads
      newWindow.print();
    };
  } else {
    alert("Please allow pop-ups to view the PDF report");
  }
  
  // Clean up
  setTimeout(() => {
    URL.revokeObjectURL(url);
  }, 1000);
};

export default function ReportsDownloads({ selectedLocation }: ReportsDownloadsProps) {
  const [reports, setReports] = useState<Report[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    setIsLoading(true);
    
    const unsubscribe = subscribeToData<any>('reports', (data) => {
      if (data) {
        try {
          const formattedReports = Object.entries(data).map(([id, report]: [string, any]) => {
            // Determine icon based on report type
            let icon = "description";
            if (report.type === "data") {
              icon = "table_chart";
            } else if (report.type === "anomaly") {
              icon = "error";
            }
            
            return {
              id,
              title: report.title,
              description: report.description,
              date: report.date,
              type: report.type,
              icon,
              fileType: report.fileType
            };
          });
          
          setReports(formattedReports);
          setIsLoading(false);
        } catch (error) {
          console.error("Error processing reports data:", error);
          setIsLoading(false);
        }
      }
    });
    
    return () => {
      unsubscribe();
    };
  }, [selectedLocation]);

  if (isLoading) {
    return (
      <Card className="overflow-hidden mb-6">
        <div className="p-4 border-b dark:border-gray-700">
          <h2 className="text-lg font-medium text-gray-900 dark:text-white">Reports & Downloads</h2>
        </div>
        <CardContent className="p-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {[1, 2, 3].map((i) => (
              <Skeleton key={i} className="h-32 rounded-lg" />
            ))}
          </div>
        </CardContent>
      </Card>
    );
  }

  // Get the right icon color based on report type
  const getIconColor = (type: string) => {
    switch (type) {
      case "report":
        return "text-blue-500 dark:text-blue-400";
      case "data":
        return "text-green-500 dark:text-green-400";
      case "anomaly":
        return "text-red-500 dark:text-red-400";
      default:
        return "text-gray-500 dark:text-gray-400";
    }
  };

  return (
    <Card className="overflow-hidden mb-6">
      <div className="p-4 border-b dark:border-gray-700">
        <h2 className="text-lg font-medium text-gray-900 dark:text-white">Reports & Downloads</h2>
      </div>
      <CardContent className="p-4">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {reports.map((report) => (
            <div key={report.id} className="border dark:border-gray-700 rounded-lg p-4 hover:scale-[1.02] transition-transform duration-200">
              <div className="flex items-start">
                <div className="flex-shrink-0">
                  <span className={`material-icons ${getIconColor(report.type)}`}>{report.icon}</span>
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-gray-900 dark:text-white">{report.title}</h3>
                  <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">{report.description}</p>
                  <div className="mt-2 flex items-center">
                    <a 
                      href="#" 
                      className="inline-flex items-center text-xs font-medium text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300"
                      onClick={(e) => {
                        e.preventDefault();
                        
                        // Generate and download a sample file based on type
                        const fileName = `${report.title.replace(/\s+/g, '_')}.${report.fileType.toLowerCase()}`;
                        
                        if (report.fileType.toLowerCase() === 'pdf') {
                          downloadSamplePDF(fileName, report.title, report.description, selectedLocation);
                        } else if (report.fileType.toLowerCase() === 'xlsx' || report.fileType.toLowerCase() === 'csv') {
                          downloadSampleCSV(fileName, report.title, selectedLocation);
                        } else {
                          downloadTextFile(fileName, report.title, report.description, selectedLocation);
                        }
                      }}
                    >
                      <span className="material-icons text-xs mr-1">download</span>
                      Download {report.fileType.toUpperCase()}
                    </a>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}
